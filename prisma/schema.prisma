// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum SubscriptionTier {
  FREE
  PAID
  PREMIUM
}

enum KeyTier {
  FREE
  PAID
  PREMIUM
}

enum KeyStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  REVOKED
}

enum ServiceType {
  AI
  PAYMENT
  WEATHER
  MAPPING
  OTHER
}

// User model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String?
  clerkId   String?  @unique
  stripeCustomerId String? @unique
  
  role      UserRole @default(USER)
  subscription SubscriptionTier @default(FREE)
  isActive  Boolean  @default(true)
  lastLoginAt DateTime?
  
  plan      String   @default("free")
  planExpiresAt DateTime?
  quotaLimit    Int      @default(1000)
  quotaUsed     Int      @default(0)
  quotaResetAt  DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  apiKeys       ApiKey[]
  usageRecords  UsageRecord[]
  auditLogs     AuditLog[]
  
  @@map("users")
}

// API Key model
model ApiKey {
  id            String      @id @default(uuid())
  userId        String
  keyHash       String      @unique
  encryptedKey  String
  
  serviceName   String
  serviceType   ServiceType
  
  tier          KeyTier     @default(FREE)
  status        KeyStatus   @default(ACTIVE)
  quota         Int         @default(1000)
  quotaUsed     Int         @default(0)
  quotaPeriod   String      @default("monthly")
  quotaResetAt  DateTime    @default(now())
  
  metadata      Json?
  description   String?
  tags          String[]
  
  requestCount  Int         @default(0)
  totalRequests Int         @default(0)
  dailyRequests Int         @default(0)
  monthlyRequests Int       @default(0)
  lastUsed      DateTime?
  expiresAt     DateTime?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageRecords  UsageRecord[]
  auditLogs     AuditLog[]
  
  @@map("api_keys")
}

// Usage tracking
model UsageRecord {
  id            String    @id @default(uuid())
  userId        String
  keyId         String
  
  service       String
  endpoint      String
  method        String    @default("GET")
  statusCode    Int
  responseTime  Int
  tier          KeyTier
  
  cost          Decimal   @default(0.00) @db.Decimal(10, 4)
  tokens        Int?
  
  userAgent     String?
  ipAddress     String?
  metadata      Json?
  
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiKey        ApiKey    @relation(fields: [keyId], references: [id], onDelete: Cascade)
  
  @@map("usage_records")
  @@index([userId, createdAt])
  @@index([keyId, createdAt])
  @@index([service, createdAt])
}

// Service configurations
model ServiceConfig {
  id            String      @id @default(uuid())
  name          String      @unique
  type          ServiceType
  baseUrl       String
  
  authType      String
  authParam     String
  
  rateLimits    Json
  supportedTiers KeyTier[]
  pricing       Json
  
  isActive      Boolean     @default(true)
  metadata      Json?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@map("service_configs")
}

// Audit logging
model AuditLog {
  id            String    @id @default(uuid())
  userId        String?
  keyId         String?
  
  action        String
  resource      String
  resourceId    String?
  
  ipAddress     String?
  userAgent     String?
  metadata      Json?
  
  createdAt     DateTime  @default(now())
  
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  apiKey        ApiKey?   @relation(fields: [keyId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
  @@index([userId, createdAt])
  @@index([action, createdAt])
}

// Metrics snapshots
model MetricSnapshot {
  id            String    @id @default(uuid())
  
  totalUsers    Int       @default(0)
  activeUsers   Int       @default(0)
  totalKeys     Int       @default(0)
  activeKeys    Int       @default(0)
  totalRequests Int       @default(0)
  totalCost     Decimal   @default(0.00) @db.Decimal(10, 4)
  
  avgResponseTime Float   @default(0)
  errorRate      Float    @default(0)
  
  memoryUsage    Float?
  cpuUsage       Float?
  
  periodStart   DateTime
  periodEnd     DateTime
  granularity   String    @default("hour")
  
  createdAt     DateTime  @default(now())
  
  @@map("metric_snapshots")
  @@index([periodStart, granularity])
}
